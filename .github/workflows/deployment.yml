# This workflow will build a docker container, publish it to Google Container
# Registry, and deploy it to GKE when there is a push to the "main"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Google Kubernetes Engine (container.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Ensure that your repository contains the necessary configuration for your
#    Google Kubernetes Engine cluster, including deployment.yml,
#    kustomization.yml, service.yml, etc.
#
# 3. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Kubernetes Engine Developer (roles/container.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 5. Change the values in the "env" block to match your values.

name: 'Build and Deploy to GKE'

on:
  push:
    branches:
      - 'main'

env:
  PROJECT_ID: 'cess-dev-tools' # TODO: actualiza con tu ID de proyecto de Google Cloud
  GAR_LOCATION: 'us-central1' # TODO: actualiza con tu región
  GKE_CLUSTER: ' gke-cluster' # TODO: actualiza con el nombre de tu clúster
  GKE_ZONE: 'us-central1-c' # TODO: actualiza con la zona de tu clúster
  DEPLOYMENT_NAME: 'gke-test' # TODO: actualiza con el nombre de tu despliegue
  REPOSITORY: 'default-repo' # Repositorio genérico en Artifact Registry

jobs:
  setup-build-publish-deploy:
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    permissions:
      contents: 'read'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v2'
        with:
          repository: gcabrera82/Challenge-GKE

      # Autenticarse en Google Cloud usando una clave de cuenta de servicio
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/setup-gcloud@v1'
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      # Crear un repositorio en Google Artifact Registry si no existe
      - name: 'Create Artifact Registry Repository'
        run: |-
          gcloud artifacts repositories create ${{ env.REPOSITORY }} \
            --repository-format=docker \
            --location=${{ env.GAR_LOCATION }} \
            --description="Default Docker repository for GKE deployment" \
            --async \
          || echo "Repository ${{ env.REPOSITORY }} already exists"

      # Construir y subir la imagen Docker a Google Artifact Registry
      - name: 'Build and push Docker container'
        run: |-
          DOCKER_TAG="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/default-image:${{ github.sha }}"

          docker build -t "${DOCKER_TAG}" .

          docker push "${DOCKER_TAG}"

      # Obtener las credenciales de GKE para desplegar en el clúster
      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_ZONE }}'

      # Desplegar la imagen Docker en el clúster de GKE
      - name: 'Deploy to GKE'
        run: |-
          kubectl set image deployment/${DEPLOYMENT_NAME} ${DEPLOYMENT_NAME}=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/default-image:${{ github.sha }}
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
